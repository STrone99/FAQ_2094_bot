from telebot import types
from datetime import datetime
import telebot
import os
import sqlite3
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup

current_directory = os.path.dirname(os.path.abspath(__file__))
database_directory = os.path.join(current_directory, 'database')
database = f'{database_directory}//FAQ_bot.db'
mess_id = None

bot = telebot.TeleBot('7463447667:AAEKdNXJfAIeLTgtErXoeiYdV3zFXAY4a0c')
try:
    class DB():
        def create_db():
            if not os.path.exists(database_directory):
                os.makedirs(database_directory)
            conn = sqlite3.connect(database)
            cursor = conn.cursor()
            cursor.execute('''   CREATE TABLE IF NOT EXISTS school 
            (
                id INTEGER PRIMARY KEY,
                name_school TEXT NOT NULL,
                address TEXT NOT NULL
            )''')
            conn.close()

    def main_menu(message):
        markup = InlineKeyboardMarkup(row_width=1)
        button1 = InlineKeyboardButton("üë®‚Äçüíº–î–∏—Ä–µ–∫—Ç–æ—Ä", callback_data="button_dir")
        button2 = InlineKeyboardButton("üë©‚Äçüíº–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞", callback_data="button_zamdir")
        button3 = InlineKeyboardButton("üìé–†–∞–∑–¥–µ–ª –ú–§–¶", callback_data="button_MFC")
        button4 = InlineKeyboardButton("üë©‚Äçüè´–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", callback_data="button_DO")
        button5 = InlineKeyboardButton("üòã–ü–∏—Ç–∞–Ω–∏–µ", callback_data="button_eat")
        button6 = InlineKeyboardButton("üè´–û–±—â–µ–µ", callback_data="button_all")
        markup.add(button1, button2, button3, button4, button5, button6)
        
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)
        
    def dir_menu(message):
        markup = InlineKeyboardMarkup(row_width=1)
        button1 = InlineKeyboardButton("–ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –ø—Ä–∏–µ–º –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É?", callback_data="button_dir_1")
        button2 = InlineKeyboardButton("–ö–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–∏—Ä–µ–∫—Ç–æ—Ä—É?", callback_data="button_dir_2")
        button_back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="button_back")
        markup.add(button1, button2, button_back)
        
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", reply_markup=markup)
        
    def zamdir_menu(message):
        markup = InlineKeyboardMarkup(row_width=1)
        button1 = InlineKeyboardButton("–ö–∞–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä–∏—Ä—É—é—Ç –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞?", callback_data="button_zamdir_1")
        button2 = InlineKeyboardButton("–ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –ø—Ä–∏–µ–º –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É?", callback_data="button_zamdir_2")
        button3 = InlineKeyboardButton("–ö–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–∏—Ä–µ–∫—Ç–æ—Ä—É?", callback_data="button_zamdir_3")
        button_back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="button_back")
        markup.add(button1, button2, button3, button_back)
        
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", reply_markup=markup)
        
    def MFC_menu(message):
        markup = InlineKeyboardMarkup(row_width=1)
        button01 = InlineKeyboardButton("–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ 1-–∫–ª–∞—Å—Å", callback_data="button_MFC_01")
        button02 = InlineKeyboardButton("–ö–∞–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–µ–±–µ–Ω–∫–∞ –≤–æ 2-11 –∫–ª–∞—Å—Å", callback_data="button_MFC_02")
        button1 = InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤", callback_data="button_MFC_1")
        button2 = InlineKeyboardButton("–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–µ–º–∞", callback_data="button_MFC_2")
        button3 = InlineKeyboardButton("–ö–∞–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–ª–∞—Å—Å—ã?", callback_data="button_MFC_3")
        button4 = InlineKeyboardButton("–ú–æ–∂–Ω–æ –ª–∏ –≤—ã–±—Ä–∞—Ç—å –ø–ª–æ—â–∞–¥–∫—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ?", callback_data="button_MFC_4")
        button5 = InlineKeyboardButton("–ö–∞–∫ –æ—Ç—á–∏—Å–ª–∏—Ç—å –∏–∑ —à–∫–æ–ª—ã?", callback_data="button_MFC_5")
        button6 = InlineKeyboardButton("–ö–∞–∫ –ø–æ–º–µ–Ω—è—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É?", callback_data="button_MFC_6")
        button7 = InlineKeyboardButton("–ö–∞–∫ –ø–æ–º–µ–Ω—è—Ç—å –∫–ª–∞—Å—Å –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π –ø–∞—Ä–∞–ª–ª–µ–ª–∏?", callback_data="button_MFC_7")
        button8 = InlineKeyboardButton("–ö–∞–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏—Å—å –∏–∑ –æ–¥–Ω–æ–π —à–∫–æ–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏ –≤ –¥—Ä—É–≥—É—é?", callback_data="button_MFC_8")
        button9 = InlineKeyboardButton("–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ —Ç–æ–º, —á—Ç–æ —Ä–µ–±–µ–Ω–æ–∫ —É—á–∏—Ç—Å—è –≤ —à–∫–æ–ª–µ?", callback_data="button_MFC_9")
        button10 = InlineKeyboardButton("–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –≤—ã–ø–∏—Å–∫—É –æ—Ü–µ–Ω–æ–∫?", callback_data="button_MFC_10")
        button11 = InlineKeyboardButton("–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≠–ñ–î —Ä–µ–±–µ–Ω–∫–∞, –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø?", callback_data="button_MFC_11")
        button12 = InlineKeyboardButton("–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≠–ñ–î —Ä–æ–¥–∏—Ç–µ–ª—è, –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø?", callback_data="button_MFC_12")
        button_back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="button_back")
        markup.add(button01, button02, button1, button2, button3, button4, button5, button6, button7, button8, button9, button10, button11, button12, button_back)
        
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", reply_markup=markup)

    def first_class_menu(message):
        markup = InlineKeyboardMarkup(row_width=1)
        button1 = InlineKeyboardButton("–ö–∞–∫ —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ–≥–æ —É—á–∏—Ç–µ–ª—è?", callback_data="button_firstclass_1")
        button2 = InlineKeyboardButton("–ú–æ–∂–Ω–æ –ª–∏ –≤—ã–±—Ä–∞—Ç—å —É—á–∏—Ç–µ–ª—è?", callback_data="button_firstclass_2")
        button3 = InlineKeyboardButton("–ù–∞–±–æ—Ä –ø–µ—Ä–≤–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞", callback_data="button_firstclass_3")
        button4 = InlineKeyboardButton("–ö–∞–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è?", callback_data="button_firstclass_4")
        button_back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="button_back_MFC")
        markup.add(button1, button2, button3, button4, button_back)
        
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", reply_markup=markup)

    def class_menu(message):
        markup = InlineKeyboardMarkup(row_width=1)
        button1 = InlineKeyboardButton("–ö–∞–∫ –ø–æ–º–µ–Ω—è—Ç—å –≥—Ä—É–ø–ø—É –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É?", callback_data="button_class_1")
        button2 = InlineKeyboardButton("–ö–∞–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–µ–±–µ–Ω–∫–∞ –≤–æ 2-11 –∫–ª–∞—Å—Å?", callback_data="button_class_2")
        button3 = InlineKeyboardButton("–ö–∞–∫ –ø–æ–º–µ–Ω—è—Ç—å –≥—Ä—É–ø–ø—É –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ?", callback_data="button_class_3")
        button4 = InlineKeyboardButton("–ö–∞–∫ –ø–æ–º–µ–Ω—è—Ç—å –∫–ª–∞—Å—Å ?", callback_data="button_class_4")
        button5 = InlineKeyboardButton("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è —Å 5-–≥–æ –∫–ª–∞—Å—Å–∞", callback_data="button_class_5")
        button6 = InlineKeyboardButton("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è —Å 10-–≥–æ –∫–ª–∞—Å—Å–∞", callback_data="button_class_6")
        button7 = InlineKeyboardButton("–ö–∞–∫ –ø–æ–º–µ–Ω—è—Ç—å –∫–ª–∞—Å—Å ?", callback_data="button_class_7")
        button_back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="button_back_MFC")
        markup.add(button1, button2, button3, button4, button5, button6, button7, button_back)
        
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", reply_markup=markup)

    #–§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç
    @bot.message_handler(commands=['start'])
    def start(message):
        main_menu(message)
        
    #–ö–Ω–æ–ø–∫–∞ –î–∏—Ä–µ–∫—Ç–æ—Ä
    @bot.callback_query_handler(func=lambda call: call.data == "button_dir")
    def handle_callback(call):
        dir_menu(call.message)
        bot.delete_message(call.message.chat.id, call.message.message_id)

    #–ö–Ω–æ–ø–∫–∞ –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
    @bot.callback_query_handler(func=lambda call: call.data == "button_zamdir")
    def handle_callback(call):
        zamdir_menu(call.message)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        
    #–ö–Ω–æ–ø–∫–∞ –ú–§–¶
    @bot.callback_query_handler(func=lambda call: call.data == "button_MFC")
    def handle_callback(call):
        MFC_menu(call.message)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        
    #*–ö–Ω–æ–ø–∫–∞ –ú–§–¶ 1 –∫–ª–∞—Å—Å
    @bot.callback_query_handler(func=lambda call: call.data == "button_MFC_01")
    def handle_callback(call):
        class_menu(call.message)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        
    #*–ö–Ω–æ–ø–∫–∞ –ú–§–¶ 2-9 –∫–ª–∞—Å—Å
    @bot.callback_query_handler(func=lambda call: call.data == "button_MFC_02")
    def handle_callback(call):
        MFC_menu(call.message)
        bot.delete_message(call.message.chat.id, call.message.message_id)

    #!–ö–Ω–æ–ø–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
    @bot.callback_query_handler(func=lambda call: call.data == "button_dir_1")
    def handle_callback(call):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞!\n\n*–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞* /start", parse_mode='Markdown')
    @bot.callback_query_handler(func=lambda call: call.data == "button_dir_2")
    def handle_callback(call):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞!\n\n*–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞* /start", parse_mode='Markdown')

    #?–ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
    @bot.callback_query_handler(func=lambda call: call.data == "button_back")
    def handle_callback(call):
        main_menu(call.message)
        bot.delete_message(call.message.chat.id, call.message.message_id)   
    @bot.callback_query_handler(func=lambda call: call.data == "button_back_MFC")
    def handle_callback(call):
        MFC_menu(call.message)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        
    bot.polling()
except Exception as e:
    print(e)